/**
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/**
 * Implementing Drag and Drop functionality in AngularJS is easier than ever.
 * Demo: http://codef0rmer.github.com/angular-dragdrop/
 *
 * @version 1.0.2
 *
 * (c) 2013 Amit Gharat a.k.a codef0rmer <amit.2006.it@gmail.com> - amitgharat.wordpress.com
 */

var jqyoui = angular.module('ngDragDrop', []).service('ngDragDropService', ['$timeout', '$parse', function($timeout, $parse) {
    this.callEventCallback = function (scope, callbackName, event, ui) {
      if (!callbackName) {
        return;
      }
      var args = [event, ui];
      var match = callbackName.match(/^(.+)\((.+)\)$/);
      if (match !== null) {
        callbackName = match[1];
        values = eval('[' + match[0].replace(/^(.+)\(/, '').replace(/\)/, '') + ']');
        args.push.apply(args, values);
      }
      scope[callbackName].apply(scope, args);
    };

    this.invokeDrop = function ($draggable, $droppable, event, ui,customCallback) {
      var dragModel = '',
        dropModel = '',
        dragSettings = {},
        dropSettings = {},
        jqyoui_pos = null,
        dragItem = {},
        dropItem = {},
        dragModelValue,
        dropModelValue,
        $droppableDraggable = null,
        droppableScope = $droppable.scope(),
        draggableScope = $draggable.scope();

      dragModel = $draggable.attr('ng-model');           
      
      dropModel = $droppable.attr('ng-model');
      dragModelValue = draggableScope.$eval(dragModel);
      dropModelValue = droppableScope.$eval(dropModel);

      $droppableDraggable = $droppable.find('[jqyoui-draggable]:last');
      dropSettings = droppableScope.$eval($droppable.attr('jqyoui-droppable')) || [];
      dragSettings = draggableScope.$eval($draggable.attr('jqyoui-draggable')) || [];

      jqyoui_pos = angular.isArray(dragModelValue) ? dragSettings.index : null;
      dragItem = angular.isArray(dragModelValue) ? dragModelValue[jqyoui_pos] : dragModelValue;
      
     
    	  if (angular.isArray(dropModelValue) && dropSettings && dropSettings.index !== undefined) {
    	        dropItem = dropModelValue[dropSettings.index];
    	      } else if (!angular.isArray(dropModelValue)) {
    	    	  if(dropSettings && dropSettings.keepOriginal !== undefined){
        	    	  dropItem = null;
        	      }else{
        	    	  dropItem = dropModelValue;
        	      }    	    	  
    	      } else {
    	        dropItem = {};
    	      }

      if (dragSettings.animate === true) {
    	  
        this.move($draggable, $droppableDraggable.length > 0 ? $droppableDraggable : $droppable, null, 'fast', dropSettings, null);
        this.move($droppableDraggable.length > 0 && !dropSettings.multiple ? $droppableDraggable : [], $draggable.parent('[jqyoui-droppable]'), jqyoui.startXY, 'fast', dropSettings, function() {
          $timeout(function() {
            // Do not move this into move() to avoid flickering issue
            $draggable.css({'position': 'relative', 'left': '', 'top': ''});
            $droppableDraggable.css({'position': 'relative', 'left': '', 'top': ''});
            
            this.mutateDraggable(draggableScope, dropSettings, dragSettings, dragModel, dropModel, dropItem, $draggable);
            this.mutateDroppable(droppableScope, dropSettings, dragSettings, dropModel, dragItem, jqyoui_pos,customCallback);                        
            
            
            this.callEventCallback(droppableScope, dropSettings.onDrop, event, ui);
            
          }.bind(this));
        }.bind(this));
      } else {
        $timeout(function() {
          this.mutateDraggable(draggableScope, dropSettings, dragSettings, dragModel, dropModel, dropItem, $draggable);
          this.mutateDroppable(droppableScope, dropSettings, dragSettings, dropModel, dragItem, jqyoui_pos,customCallback);
          this.callEventCallback(droppableScope, dropSettings.onDrop, event, ui);
        }.bind(this));
      }
      
    };

    this.move = function($fromEl, $toEl, toPos, duration, dropSettings, callback) {    	    	
    	
      if ($fromEl.length === 0) {
        if (callback) {
          window.setTimeout(function() {
            callback();
          }, 300);
        }
        return false;
      }

      var zIndex = 9999,
        fromPos = $fromEl.offset(),
        wasVisible = $toEl && $toEl.is(':visible');

      if (toPos === null && $toEl.length > 0) {
        if ($toEl.attr('jqyoui-draggable') !== undefined && $toEl.attr('ng-model') !== undefined && $toEl.is(':visible') && dropSettings && dropSettings.multiple) {
          toPos = $toEl.offset();
          if (dropSettings.stack === false) {
            toPos.left+= $toEl.outerWidth(true);
          } else {
            toPos.top+= $toEl.outerHeight(true);
          }
        } else {
          toPos = $toEl.css({'visibility': 'hidden', 'display': 'block'}).offset();
          $toEl.css({'visibility': '','display': wasVisible ? '' : 'none'});
        }
      }

      $fromEl.css({'position': 'absolute', 'z-index': zIndex})
        .css(fromPos)
        .animate(toPos, duration, function() {
          if (callback) callback();
        });
    };

    this.mutateDroppable = function(scope, dropSettings, dragSettings, dropModel, dragItem, jqyoui_pos,customCallback) {
      var dropModelValue = scope.$eval(dropModel);

      scope.__dragItem = dragItem;
      
      if (angular.isArray(dropModelValue)) {
        if (dropSettings && dropSettings.index >= 0) {
        	
          dropModelValue[dropSettings.index] = dragItem;
        } else {
        	
        	if(dropSettings.isAdding){
        		dragItem.isChange = "modifiedItemAdding";
        	}else{
        		dragItem.isChange = "modifiedItemDeleting";
        	}
        	
        	dragItem.isChangeForSorting = true;
        	dropModelValue.unshift(dragItem);
        	
        }
        if (dragSettings && dragSettings.placeholder === true) {
          dropModelValue[dropModelValue.length - 1]['jqyoui_pos'] = jqyoui_pos;
        }
      } else {

		  $parse(dropModel + ' = __dragItem')(scope);
		  if (dragSettings && dragSettings.placeholder === true) {
			  dropModelValue['jqyoui_pos'] = jqyoui_pos;
		  }

      }
      
      if(customCallback){
    	  customCallback();
      } 
    };

    this.mutateDraggable = function(scope, dropSettings, dragSettings, dragModel, dropModel, dropItem, $draggable) {
      var isEmpty = $.isEmptyObject(angular.copy(dropItem)),
        dragModelValue = scope.$eval(dragModel);

      scope.__dropItem = dropItem;

      if (dragSettings && dragSettings.placeholder) {
        if (dragSettings.placeholder != 'keep'){
          if (angular.isArray(dragModelValue) && dragSettings.index !== undefined) {
        	  
        	  if(dropItem !== null){        		  
        		  dragModelValue[dragSettings.index] = dropItem;
        	  }
          } else {
            $parse(dragModel + ' = __dropItem')(scope);
          }
        }
      } else {
        if (angular.isArray(dragModelValue)) {
          if (isEmpty) {
            if (dragSettings && ( dragSettings.placeholder !== true && dragSettings.placeholder !== 'keep' )) {
              dragModelValue.splice(dragSettings.index, 1);
            }
          } else {
            dragModelValue[dragSettings.index] = dropItem;
          }
        } else {
          // Fix: LIST(object) to LIST(array) - model does not get updated using just scope[dragModel] = {...}
          // P.S.: Could not figure out why it happened
          $parse(dragModel + ' = __dropItem')(scope);
          if (scope.$parent) {
            $parse(dragModel + ' = __dropItem')(scope.$parent);
          }
        }
      }

      $draggable.css({'z-index': '', 'left': '', 'top': ''});
    };
    
    this.changeSaveList = function(scope,droppable,draggable){
    	var dragSettings = scope.$eval(draggable.attr('jqyoui-draggable')) || [];                	
    	
    	var forAdding = droppable.attr('for-adding');
    	
    	var object = scope[draggable.attr("ng-model")][dragSettings.index];
    	
    	if (typeof forAdding !== 'undefined' && forAdding !== false) {                		
    		
    		scope[droppable.attr("summary-added-model")].push(object);
    		
    		scope[droppable.attr("for-adding")].push(draggable.attr("customId"));
    		                		                		
    		var otherDroppable = $("[for-removing ^= removed]");
    		var index= scope[otherDroppable.attr("for-removing")].indexOf(draggable.attr("customId"));
    		var indexSummary = scope[otherDroppable.attr("summary-removed-model")].indexOf(object);
    		
    		if(index != -1){
    			scope[otherDroppable.attr("for-removing")].splice(index,1);
    		}                		                		
    		
    		if(indexSummary != -1){
    			scope[otherDroppable.attr("summary-removed-model")].splice(indexSummary,1);
    		}
    		
    	}
    	
    	var forRemoving = droppable.attr('for-removing');
    	
    	
    	if (typeof forRemoving !== 'undefined' && forRemoving !== false) {
    	               		                		
    		scope[droppable.attr("summary-removed-model")].push(object);
    		
    		scope[droppable.attr("for-removing")].push(draggable.attr("customId"));
    		                		                		
    		var otherDroppable = $("[for-adding ^= added]");
    		
    		var index= scope[otherDroppable.attr("for-adding")].indexOf(draggable.attr("customId"));
    		var indexSummary = scope[otherDroppable.attr("summary-added-model")].indexOf(object);    		    		
    		
    		if(index != -1){
    			scope[otherDroppable.attr("for-adding")].splice(index,1);
    		}  
    		
    		if(indexSummary != -1){
    			scope[otherDroppable.attr("summary-added-model")].splice(indexSummary,1);
    		}
    		
    	}    	    	     	
    	
    };
    
  }]).directive('jqyouiDraggable', ['ngDragDropService', function(ngDragDropService) {
    return {
      require: '?jqyouiDroppable',
      restrict: 'A',
      link: function(scope, element, attrs) {
    	  
        var dragSettings, zIndex;
        var updateDraggable = function(newValue, oldValue) {
	
          if (newValue) {
            dragSettings = scope.$eval(element.attr('jqyoui-draggable')) || [];
            element
              .draggable({disabled: false})
              .draggable({helper: "clone"})
              .draggable(scope.$eval(attrs.jqyouiOptions) || {})
              .draggable({
            	  
                start: function(event, ui) {
                	
                	
                	ui.helper.css('z-index', "9999999");               
                    
                	var dragMulti = $(this).attr('multi-draggable');
                	
	               	 if(dragMulti != "true"){
	                	
	                	$(this).addClass("selectedItem");
	               	 }
                	
                  jqyoui.startXY = $(this).offset();
                  
                  ngDragDropService.callEventCallback(scope, dragSettings.onStart, event, ui);
                },
                stop: function(event, ui) {                	
                	$(this).removeClass("selectedItem");
                  ngDragDropService.callEventCallback(scope, dragSettings.onStop, event, ui);
                },
                drag: function(event, ui) { 
                	//$(this).css('z-index', 99999);
                  ngDragDropService.callEventCallback(scope, dragSettings.onDrag, event, ui);
                }
              });
          } else {
            element.draggable({disabled: true});
          }
        };
        scope.$watch(function() { return scope.$eval(attrs.drag); }, updateDraggable);
        updateDraggable();
        
       
        
      }
    };
  }]).directive('jqyouiDroppable', ['ngDragDropService', function(ngDragDropService) {
    return {
      restrict: 'A',
      priority: 1,
      link: function(scope, element, attrs) {
    	 
    	var cont = 0;
    	var $customs;
    	var draggable;
    	var droppable;
    	var nevent;
    	var nui;
    	var loader = "";
    	var modelElement;
    	
    	var loadNext = function(){
    		    
    		
    		
    		if(cont < $customs.length){
    			
    			var dragEach = angular.element($customs[cont]);
    			
         		ngDragDropService.changeSaveList(scope,droppable,dragEach);
         		ngDragDropService.invokeDrop(dragEach, droppable, nevent, nui,loadNext);                     		
         		cont++;
         		
    		}else{   
    			loader.addClass("toggleOff");
    			scope[modelElement] = [];
    		}     		
    	}
      
    	  
        var updateDroppable = function(newValue, oldValue) {
        	
          if (newValue) {
            element
              .droppable({disabled: false})
              .droppable(scope.$eval(attrs.jqyouiOptions) || {})
              .droppable({
                over: function(event, ui) {
               
                  var dropSettings = scope.$eval(angular.element(this).attr('jqyoui-droppable')) || [];
                  ngDragDropService.callEventCallback(scope, dropSettings.onOver, event, ui);
                },
                out: function(event, ui) {
                  var dropSettings = scope.$eval(angular.element(this).attr('jqyoui-droppable')) || [];
                  ngDragDropService.callEventCallback(scope, dropSettings.onOut, event, ui);
                },
                drop: function(event, ui) {
                	
                	nevent = event;
                	nui = ui;
                	draggable = angular.element(ui.draggable);
                	droppable = angular.element(this);
                	
                	var dragMulti = draggable.attr('multi-draggable');
                	
                	 if(dragMulti == "true"){            
                		 
                		 loader = $("#"+draggable.attr("loader"));
                		 loader.removeClass("toggleOff");
                		 
                		 $customs = draggable.find("[customMultiple=true]");
                		 
                		 modelElement = $($customs[0]).attr("ng-model");
                		 
                		 loadNext();
                     	
                     	var origin = $("#"+draggable.attr("origin"));
                     	origin.prepend(draggable);
                     	draggable.attr("style",draggable.attr("originalStyle"));
                     	
                     	
                     }else{
                    	 
                    	 ngDragDropService.changeSaveList(scope,droppable,draggable);
                    	 
                    	 ngDragDropService.invokeDrop(draggable, angular.element(this), event, ui);
                     } 
                	 
                	 scope.$apply();
                	 
                }
              });
          } else {      
            element.droppable({disabled: true});
          }
        };

        scope.$watch(function() { return scope.$eval(attrs.drop); }, updateDroppable);
        updateDroppable();
      }
    };
  }]);
